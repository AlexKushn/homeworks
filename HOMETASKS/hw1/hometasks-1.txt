Задание 1: реверс строки.

УСЛОВИЕ:
Преобразовать строку "ecnalubma" в ее зеркальное отражение (реверсировать).
Сделать это четырьмя разными способами.

ВХОД: строка
ВЫХОД: реверсированная строка

Пример:
"ambulance" == reverse_fn("ecnalubma")

================================================================================

Задание 2: подсчет гласных.

УСЛОВИЕ:
Написать функцию, которая подсчитывает гласные буквы в строке.

Примечание:
- для простоты на вход принимаем строку из букв латинского алфавита;
- набор гласных принимаем за 'a', 'e', 'i', 'o', 'u';
- программа должна быть нечувствительна к регистру.

Пример:
assert vowels("hApPyHalLOweEn!") == 5

================================================================================

Задание 3: подстчет вхождений подстроки.

УСЛОВИЕ:
Реализовать функцию, которая будет подсчитывать количество вхождений подстроки "wow" в строке.

ВХОД: строка
ВЫХОД: число вхождений подстроки "wow"

Пример:
assert wower("wowhatamanwowowpalehche") == 3

================================================================================

Задание 4: упорядоченная подстрока.

УСЛОВИЕ:
Построить функцию, которая будет находить в строке подстроку максимальной длины, в которой буквы упорядочены в алфавитном порядке.

ВХОД: строка
ВЫХОД: подстрока

Пример:
assert alphabetical("sabrrtuwacaddabra") == "abrrtuw"

================================================================================

Задание 5: определение типа.

УСЛОВИЕ:
функция, которая принимает объект и выводит строку с наименованием типа этого объекта.

Пример:
typer(666) == "int"
typer("666") == "str"
typer(typer) == "function"

================================================================================

Задание 6: А & B.

УСЛОВИЕ:
Написать фрагмент python кода, который будет анализировать две переменные модуля (А и В), которые могут быть типа "str" или "int".
В зависимости от значения переменных код должен выводить на печать ОДНО из следующих сообщений:
- "получена строка" - если хотя бы одна из переменных является строкой;
- "больше" - если А больше В;
- "равны" - если значения переменных равны;
- "меньше" - если А меньше В.



================================================================================

Задание 7: уникальный набор.

УСЛОВИЕ:
Реализовать функцию, которая принимает список елементов и убирает из него все дубликаты (формирует список уникальных элементов).
Сделать вариант с сохранением порядка следования элементов и вариант, в кот. сортировка элементов не принципиальна.

Пример:
а) assert unique_ordered(["a", 5, 2, 5, (1, "a"), "a"]) == ["a", 5, 2, (1, "a")]
б) assert unique_disordered(["a", 5, 2, 5, (1, "a"), "a"]) == [2, "a", 5, (1, "a")]

================================================================================

Задание 8: каждый третий.

УСЛОВИЕ:
Реализовать функцию которая принимает кортеж и возвращает прореженный кортеж, оставляя только каждый третий элемент.
Реализовать задачу двумя разными вариантами.

Пример:
assert thirds((1,2,3,4,5,6,7,8,9,0,'a','b','c')) == (3,6,9,'b')

================================================================================

Задание 9: XYZ.

УСЛОВИЕ:
Написать функцию без использования каких-либо условных выражений, а применив встроенные функции min() и max(), которая принимает три аргумента - числа X, Y, Z и возвращает один из вариантов в порядке возрастания значимости:
- X, если Y < X;
- Z, если Y > Z;
- Y, при ином раскладе.

================================================================================

Задание 10: интерактивный подсчет гласных.

УСЛОВИЕ:
Написать программу (python script), которая при запуске будет запрашивать пользователя ввести произвольную строку и выдавать в ответе количество гласных букв.
Примечание:
- для ручного ввода используем встроенную функцию raw_input();
- для простоты на вход принимаем строку из букв латинского алфавита;
- набор гласных принимаем за 'a', 'e', 'i', 'o', 'u';
- программа должна быть нечувствительна к регистру.

ВХОД: строка (ручной ввод пользователем)
ВЫХОД: строка вида:
"The string contains 2 vowels" - если гласные присутствуют,
"The string doesn't contain vowels" - в противном случае.

Пример:
python ivowels.py - запуск

Вывод:
"Please, enter your string: "
"wHAt Do yOU wANt fRom ME?"
"The string contains 7 vowels"
"Continue? (yes/no) "
"maybe"
"Please, enter corrent answer. Continue? (yes/no) "
"yes"
"Hurray!"
"Please, enter your string: "
"HHHMMMMM..."
"The string doesn't contain vowels"
"Continue? (yes/no) "
"no"
"It was nice to count your vowels!"

================================================================================
